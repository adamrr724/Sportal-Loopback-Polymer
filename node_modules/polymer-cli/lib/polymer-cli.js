/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
"use strict";
const logging = require('plylog');
const commandLineArgs = require('command-line-args');
const commandLineCommands = require('command-line-commands');
const args_1 = require('./args');
const build_1 = require('./commands/build');
const help_1 = require('./commands/help');
const init_1 = require('./commands/init');
const lint_1 = require('./commands/lint');
const serve_1 = require('./commands/serve');
const test_1 = require('./commands/test');
const project_config_1 = require('./project-config');
const logger = logging.getLogger('cli.main');
process.on('uncaughtException', (error) => {
    logger.error(`Uncaught exception: ${error}`);
    if (error.stack)
        logger.error(error.stack);
    process.exit(1);
});
process.on('unhandledRejection', (error) => {
    logger.error(`Promise rejection: ${error}`);
    if (error.stack)
        logger.error(error.stack);
    process.exit(1);
});
class PolymerCli {
    constructor(args, config) {
        this.commands = new Map();
        // If the "--quiet"/"-q" flag is ever present, set our global logging
        // to quiet mode. Also set the level on the logger we've already created.
        if (args.indexOf('--quiet') > -1 || args.indexOf('-q') > -1) {
            logging.setQuiet();
        }
        // If the "--verbose"/"-v" flag is ever present, set our global logging
        // to verbose mode. Also set the level on the logger we've already created.
        if (args.indexOf('--verbose') > -1 || args.indexOf('-v') > -1) {
            logging.setVerbose();
        }
        this.args = args;
        logger.debug('got args:', { args: args });
        if (config) {
            this.defaultConfig = config;
            logger.debug('got default config from constructor argument:', { config: this.defaultConfig });
        }
        else {
            this.defaultConfig = project_config_1.ProjectConfig.fromConfigFile('polymer.json');
            logger.debug('got default config from file:', { config: this.defaultConfig });
        }
        this.addCommand(new build_1.BuildCommand());
        this.addCommand(new help_1.HelpCommand(this.commands));
        this.addCommand(new init_1.InitCommand());
        this.addCommand(new lint_1.LintCommand());
        this.addCommand(new serve_1.ServeCommand());
        this.addCommand(new test_1.TestCommand());
    }
    addCommand(command) {
        logger.debug('adding command', command.name);
        this.commands.set(command.name, command);
    }
    mergeDefinitions(command, globals) {
        let mergedArgs = new Map();
        let defaultOption = null;
        let addAll = (args) => {
            for (let definition of args) {
                let name = definition.name;
                let oldDefinition = mergedArgs.get(name);
                if (oldDefinition == null) {
                    mergedArgs.set(definition.name, definition);
                }
                else {
                    let mergedDefinition = Object.assign({}, oldDefinition);
                    for (let propName of Object.keys(definition)) {
                        if (propName === 'name')
                            continue;
                        let propValue = definition[propName];
                        let oldProp = oldDefinition[propName];
                        if (oldProp == null) {
                            mergedDefinition[propName] = propValue;
                        }
                        else {
                            throw new Error(`duplicate argument definition in ${command.name}: ${name}.${propName}`);
                        }
                    }
                    mergedArgs.set(name, mergedDefinition);
                    definition = mergedDefinition;
                }
                if (definition.defaultOption) {
                    if (defaultOption && defaultOption !== name) {
                        throw new Error(`Multiple default arguments in ${command.name}: ` +
                            `${defaultOption} and ${name}`);
                    }
                    defaultOption = name;
                }
            }
        };
        if (globals)
            addAll(globals);
        if (command.args)
            addAll(command.args);
        return Array.from(mergedArgs.values());
    }
    run() {
        let helpCommand = this.commands.get('help');
        let commandNames = Array.from(this.commands.keys());
        let parsedArgs;
        logger.debug('running...');
        // If the "--version" flag is ever present, just print
        // the current version. Useful for globally installed CLIs.
        if (this.args.indexOf('--version') > -1) {
            console.log(require('../package.json').version);
            return Promise.resolve();
        }
        try {
            parsedArgs = commandLineCommands(commandNames, this.args);
        }
        catch (error) {
            // Polymer CLI needs a valid command name to do anything. If the given
            // command is invalid, run the generalized help command with default
            // config. This should print the general usage information.
            if (error.name === 'INVALID_COMMAND') {
                if (error.command) {
                    logger.warn(`'${error.command}' is not an available command.`);
                }
                return helpCommand.run({ command: error.command }, new project_config_1.ProjectConfig(this.defaultConfig));
            }
            // If an unexpected error occurred, propagate it
            throw error;
        }
        let commandName = parsedArgs.command;
        let commandArgs = parsedArgs.argv;
        let command = this.commands.get(commandName);
        logger.debug(`command '${commandName}' found, parsing command args:`, { args: commandArgs });
        let commandDefinitions = this.mergeDefinitions(command, args_1.globalArguments);
        let commandOptionsRaw = commandLineArgs(commandDefinitions, commandArgs);
        let commandOptions = (commandOptionsRaw && commandOptionsRaw['_all']);
        logger.debug(`command options parsed from args:`, commandOptions);
        let config = new project_config_1.ProjectConfig(this.defaultConfig, commandOptions);
        logger.debug(`final project configuration generated:`, config);
        // Help is a special argument for displaying help for the given command.
        // If found, run the help command instead, with the given command name as
        // an option.
        if (commandOptions['help']) {
            logger.debug(`'--help' option found, running 'help' for given command...`);
            return helpCommand.run({ command: commandName }, config);
        }
        logger.debug('Running command...');
        return command.run(commandOptions, config);
    }
}
exports.PolymerCli = PolymerCli;
