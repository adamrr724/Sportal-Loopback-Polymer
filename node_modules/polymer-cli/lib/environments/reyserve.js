/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
"use strict";
const build_1 = require('../build/build');
const github_1 = require('../github/github');
const temp = require('temp');
const fs = require('fs-extra');
const path = require('path');
const child_process = require('child_process');
temp.track();
const REYSERVE_FILES = ['app.yaml', 'reyserve.py', 'http2push.py'];
class ReyServe {
    build(opts, config) {
        const bundled = path.join(process.cwd(), 'build/bundled');
        const unbundled = path.join(process.cwd(), 'build/unbundled');
        const reyserveFiles = temp.mkdirSync('reyserve');
        return build_1.build(opts, config).then(() => {
            console.log('Downloading reyserve release');
            const repo = new github_1.Github({ owner: 'Polymer', repo: 'reyserve' });
            return repo.extractLatestRelease(reyserveFiles);
        })
            .then(() => {
            console.log('Coyping reyserve files');
            // TODO(garlicnation): One server serves bundled and unbundled.
            REYSERVE_FILES.forEach((file) => {
                fs.copySync(path.join(reyserveFiles, file), path.join(bundled, file));
                fs.copySync(path.join(reyserveFiles, file), path.join(unbundled, file));
            });
        });
    }
    serve(options) {
        return new Promise((resolve, reject) => {
            console.log('Launching reyserve dev server');
            let devServer = child_process.spawn('dev_appserver.py', ['app.yaml'], {
                stdio: 'inherit',
                cwd: options.root
            });
            devServer.on('close', (code) => {
                resolve(code);
            });
            devServer.on('error', (error) => {
                reject(error);
            });
        });
    }
    ;
}
exports.ReyServe = ReyServe;
