/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const events = require('events');
const _ = require('lodash');
const config = require('./config');
const plugin_1 = require('./plugin');
/**
 * Exposes the current state of a WCT run, and emits events/hooks for anyone
 * downstream to listen to.
 *
 * @param {Object} options Any initially specified options.
 */
class Context extends events.EventEmitter {
    constructor(options) {
        super();
        this._hookHandlers = {};
        options = options || {};
        /**
         * The configuration for the current WCT run.
         *
         * We guarantee that this object is never replaced (e.g. you are free to hold
         * a reference to it, and make changes to it).
         */
        this.options = config.merge(config.defaults(), config.fromDisk(options.enforceJsonConf, options.root), options);
    }
    // Hooks
    //
    // In addition to emitting events, a context also exposes "hooks" that
    // interested parties can use to inject behavior.
    /**
     * Registers a handler for a particular hook. Hooks are typically configured to
     * run _before_ a particular behavior.
     */
    hook(name, handler) {
        this._hookHandlers[name] = this._hookHandlers[name] || [];
        this._hookHandlers[name].unshift(handler);
    }
    ;
    /**
     * Registers a handler that will run after any handlers registered so far.
     *
     * @param {string} name
     * @param {function(!Object, function(*))} handler
     */
    hookLate(name, handler) {
        this._hookHandlers[name] = this._hookHandlers[name] || [];
        this._hookHandlers[name].push(handler);
    }
    ;
    emitHook(name, done) {
        done = done || ((e) => { });
        this.emit('log:debug', 'hook:', name);
        const hooks = (this._hookHandlers[name] || []);
        let boundHooks;
        if (arguments.length > 2) {
            const hookArgs = Array.from(arguments).slice(1, arguments.length - 1);
            done = arguments[arguments.length - 1];
            boundHooks = hooks.map(function (hook) {
                return hook.bind.apply(hook, [null].concat(hookArgs));
            });
        }
        if (!boundHooks) {
            boundHooks = hooks;
        }
        // We execute the handlers _sequentially_. This may be slower, but it gives us
        // a lighter cognitive load and more obvious logs.
        let promise = Promise.resolve(null);
        for (const hook of boundHooks) {
            promise = promise.then(() => {
                return new Promise((resolve, reject) => {
                    hook((err) => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                });
            });
        }
        promise.then(() => done(), (err) => done(err));
        return this;
    }
    ;
    /**
     * @param {function(*, Array<!Plugin>)} done Asynchronously loads the plugins
     *     requested by `options.plugins`.
     */
    plugins(done) {
        this._plugins().then((plugins) => done(null, plugins), (err) => done(err));
    }
    ;
    _plugins() {
        return __awaiter(this, void 0, void 0, function* () {
            const plugins = [];
            for (const name of this.enabledPlugins()) {
                const plugin = yield (new Promise((resolve, reject) => {
                    plugin_1.Plugin.get(name, (err, plugin) => {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve(plugin);
                        }
                    });
                }));
                plugins.push(plugin);
            }
            return plugins;
        });
    }
    /**
     * @return {!Array<string>} The names of enabled plugins.
     */
    enabledPlugins() {
        // Plugins with falsy configuration or disabled: true are _not_ loaded.
        const pairs = _.reject(_.pairs(this.options.plugins), (p) => !p[1] || p[1].disabled);
        return _.map(pairs, (p) => p[0]);
    }
    ;
    /**
     * @param {string} name
     * @return {!Object}
     */
    pluginOptions(name) {
        return this.options.plugins[plugin_1.Plugin.shortName(name)];
    }
    ;
}
Context.Context = Context;
exports.Context = Context;
module.exports = Context;