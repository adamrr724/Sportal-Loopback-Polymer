/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require('path');
const fs = require('fs');
const args_1 = require('./args');
const start_server_1 = require('./start_server');
const commandLineArgs = require('command-line-args');
const commandLineUsage = require('command-line-usage');
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        const argsWithHelp = args_1.args.concat({
            name: 'help',
            description: 'Shows this help message',
            type: Boolean,
        });
        let cliOptions;
        try {
            cliOptions = commandLineArgs(argsWithHelp);
        }
        catch (e) {
            printUsage(argsWithHelp);
            return;
        }
        const options = {
            root: cliOptions.root,
            port: cliOptions.port,
            hostname: cliOptions.hostname,
            open: cliOptions.open,
            browser: cliOptions['browser'],
            openPath: cliOptions['open-path'],
            componentDir: cliOptions['component-dir'],
            packageName: cliOptions['package-name'],
        };
        if (cliOptions.help) {
            printUsage(argsWithHelp);
        }
        else if (cliOptions.version) {
            console.log(getVersion());
        }
        else {
            yield start_server_1.startServer(options);
        }
    });
}
exports.run = run;
function printUsage(options) {
    const usage = commandLineUsage([{
            header: 'A development server for Polymer projects',
            title: 'polyserve',
            optionList: options,
        }]);
    console.log(usage);
}
function getVersion() {
    const packageFilePath = path.resolve(__dirname, '../package.json');
    const packageFile = fs.readFileSync(packageFilePath).toString();
    const packageJson = JSON.parse(packageFile);
    const version = packageJson['version'];
    return version;
}
